

import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { CalendarIcon, Search, User } from "lucide-react";
import { format } from "date-fns";
import {
  Table,
  TableHeader,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
} from "@/components/ui/table";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from "recharts";

// Table columns for Test Result Records
const tableColumns = [
  "Location",
  "MasterID (Key)",
  "Equipment Type",
  "Sample ID",
  "SampleDate",
  "Time",
  "Sample Type",
  "Collected by",
  "ReportedBy",
  "Sample Volume (mL)",
  "Comments",
  "Test type",
  "Test Value",
  "Test Value Units",
];

// Single sample table row as requested
const mockTableRows = [
  {
    "Location": "1",
    "MasterID (Key)": "94",
    "Equipment Type": "Vessel",
    "Sample ID": "01AP4",
    "SampleDate": "8/14/2024",
    "Time": "8:00AM PST",
    "Sample Type": "Planktonic",
    "Collected by": "Tom P.,  Mitchell R.",
    "ReportedBy": "EnhanceCo",
    "Sample Volume (mL)": "250",
    "Comments": "Dark Black Water",
    "Test type": "ATP (Free)",
    "Test Value": "2",
    "Test Value Units": "RLUs"
  }
];

// New time series data with all 20 columns
const newGraphData = [
  [7,86,45,20,39,48,54,30,99,26,31,98,45,19,24,50,64,59,131,78,65],
  [14,84,46,20,39,49,56,30,94,26,31,88,46,19,25,51,66,61,119,79,66],
  [21,83,46,20,39,49,56,29,91,26,31,86,46,19,25,52,67,62,112,79,66],
  [28,84,47,20,39,49,57,29,90,26,31,85,46,20,25,52,68,63,111,80,67],
  [35,85,47,20,39,50,59,29,91,26,31,88,47,20,25,53,68,63,111,80,67],
  [42,87,47,20,39,50,59,29,91,26,31,91,47,19,25,53,68,63,114,80,67],
  [49,88,47,20,39,50,58,29,93,26,31,96,46,19,25,53,68,62,118,80,67],
  [56,89,47,20,39,50,58,29,95,26,31,100,47,19,25,53,68,62,121,80,67],
  [63,90,47,20,39,50,59,29,95,26,31,103,47,19,25,53,68,63,124,81,67],
  [70,91,47,20,39,50,60,29,96,26,31,106,47,19,25,53,68,63,126,80,67],
  [77,91,47,20,39,50,60,29,97,26,31,109,47,19,25,53,68,63,128,81,67],
  [84,92,47,20,39,50,60,29,98,26,31,110,47,19,25,53,68,63,129,81,67],
  [91,92,47,20,39,50,60,29,99,26,31,112,47,19,25,52,68,63,130,81,67],
  [98,92,47,20,39,50,60,29,99,26,31,113,47,19,25,52,68,63,132,81,67],
  [105,93,47,20,39,50,61,29,99,26,31,114,46,19,25,52,68,62,132,81,68],
  [112,93,47,20,39,50,61,29,100,26,31,115,47,19,25,52,68,63,133,81,67],
  [119,93,47,20,39,50,61,29,100,26,31,115,46,19,25,52,68,63,133,81,67],
  [126,93,47,20,39,50,61,29,100,26,31,116,46,19,25,52,68,63,134,81,67],
  [133,93,47,20,39,50,61,29,100,26,31,116,47,19,25,52,67,63,134,81,67],
  [140,93,47,20,39,50,60,29,101,26,31,116,47,19,25,52,67,64,134,81,67],
  [147,93,47,20,39,50,60,29,101,26,31,117,46,19,25,52,67,64,134,81,67],
  [154,93,46,20,39,50,60,29,101,26,31,117,47,19,25,52,67,64,135,81,67],
  [161,93,47,20,39,50,62,29,101,26,31,117,47,19,25,52,67,64,135,81,67],
  [168,93,46,20,39,50,62,29,101,26,31,117,47,19,25,52,67,64,134,81,67],
  [175,93,46,20,39,50,62,29,101,26,31,117,47,19,25,52,67,64,135,81,67],
  [182,93,46,20,39,50,63,29,101,26,31,117,46,19,25,52,67,65,134,81,67],
  [189,93,46,20,39,50,64,29,101,26,31,117,46,19,25,52,67,63,134,81,67],
  [196,93,46,20,39,50,63,29,101,26,31,117,46,19,25,52,67,64,134,81,67],
  [203,93,47,20,39,50,63,29,101,26,31,118,47,19,25,52,67,64,135,81,67],
  [210,93,47,20,39,50,64,29,101,26,31,117,47,19,25,52,67,64,135,81,67],
  [217,93,47,20,39,50,64,29,101,26,31,117,47,20,25,52,67,64,135,81,67],
  [224,93,46,20,39,50,63,29,101,26,31,117,44,20,25,52,67,64,135,81,67],
  [231,93,46,20,39,50,64,29,101,26,31,117,45,20,25,52,67,64,135,81,67],
  [238,93,46,20,39,50,64,29,101,26,31,117,45,20,25,52,67,63,134,81,67],
  [245,93,46,20,39,50,64,29,101,26,31,117,45,20,25,52,67,63,135,81,65],
  [252,93,46,20,39,50,62,29,101,26,31,117,45,20,25,52,67,63,135,81,67],
  [259,93,46,20,39,50,62,29,101,26,31,116,46,20,25,52,67,63,135,81,67],
  [266,93,46,20,39,50,62,29,101,26,31,116,46,20,25,52,67,63,135,81,67],
  [273,93,46,20,39,50,62,29,101,26,31,116,46,20,25,52,67,64,135,81,67],
  [280,93,46,20,39,50,61,29,101,26,31,115,46,20,25,52,67,63,135,81,67],
  [287,93,46,20,39,50,61,29,101,26,31,115,46,20,25,52,66,63,135,81,67],
  [294,93,46,20,39,49,62,29,101,26,31,115,46,20,24,52,67,63,135,81,67],
  [301,93,46,20,39,50,62,29,101,26,31,115,46,19,24,51,66,62,135,81,67],
  [308,92,46,20,39,50,60,29,101,26,31,115,46,20,25,51,66,62,135,81,67],
  [315,93,46,20,39,49,61,29,101,26,31,115,45,19,24,51,66,62,136,81,67],
  [322,93,46,20,39,49,61,29,101,26,31,114,45,19,24,51,66,59,135,81,67],
  [329,92,46,20,39,49,62,29,101,26,31,114,45,19,24,51,66,59,136,81,67],
  [336,92,46,19,39,49,63,29,101,26,31,114,46,19,24,51,66,59,136,81,67],
  [343,93,46,19,39,49,64,29,101,26,31,113,46,19,24,51,66,60,137,81,67],
  [350,92,46,19,39,49,64,29,101,26,31,113,46,19,24,51,66,59,136,81,67],
  [357,92,46,19,39,49,59,29,101,26,31,113,46,20,24,51,66,59,137,81,67],
  [364,92,46,19,39,49,50,29,101,26,31,113,47,19,24,51,66,59,136,81,67],
  [371,92,46,19,39,49,53,29,100,26,31,113,47,19,24,51,66,59,136,81,67],
  [378,92,46,19,39,49,53,29,100,26,31,112,46,19,24,51,66,59,136,81,67],
  [385,92,46,19,39,49,54,29,100,26,31,112,46,19,24,51,66,60,136,81,67],
  [392,92,46,19,39,49,54,29,100,26,31,112,46,19,24,51,66,60,136,81,67],
  [399,92,46,19,39,49,54,29,100,26,31,112,45,19,24,51,66,60,135,81,67],
  [406,92,46,19,39,49,54,29,101,26,31,112,44,19,24,51,66,61,135,81,67],
  [413,92,46,19,39,49,56,29,100,26,31,111,45,19,24,51,66,57,135,81,68],
  [420,92,46,19,39,49,55,29,100,26,31,111,44,19,24,51,66,58,135,81,67],
  [427,92,46,19,39,49,56,29,100,26,31,111,44,19,24,51,66,59,135,81,67],
  [434,92,46,19,39,49,55,29,100,26,31,111,44,19,24,50,65,59,135,81,67],
  [441,92,46,19,39,49,56,29,100,26,31,111,44,19,24,51,65,59,135,81,67],
  [448,92,46,19,39,49,55,29,100,26,31,111,45,19,24,51,65,59,135,81,67],
  [455,92,46,19,39,49,57,29,100,26,31,110,44,19,24,51,65,59,135,81,67],
  [462,92,46,19,39,49,51,29,100,26,31,110,43,19,24,51,66,59,134,81,67],
  [469,92,46,18,39,49,52,29,100,26,31,110,43,19,24,51,65,60,134,81,67],
  [476,92,46,19,39,49,52,29,99,26,31,110,44,19,24,51,65,59,134,81,67],
  [483,92,46,19,39,49,53,29,100,26,31,110,44,19,24,50,65,59,134,81,67],
  [490,92,46,18,39,49,53,30,100,26,31,110,44,19,24,50,65,59,134,81,67],
  [497,92,46,19,39,49,53,29,100,26,31,110,44,19,24,51,65,60,134,81,67],
  [504,92,46,19,39,49,53,30,100,26,31,110,44,19,24,50,65,57,134,81,67],
  [511,92,46,19,39,49,53,29,100,26,31,110,44,19,24,50,65,59,134,81,67],
  [518,92,46,19,39,49,53,29,100,26,31,110,45,19,24,50,65,58,133,81,67],
  [525,92,46,18,39,49,54,29,100,26,31,110,45,19,24,50,65,58,133,81,67],
  [532,92,46,18,39,49,48,29,100,26,31,109,44,19,24,50,65,58,133,81,67],
  [539,92,46,19,39,49,49,29,100,26,31,109,44,19,24,50,65,58,133,81,67],
  [546,92,46,18,39,48,50,29,100,26,31,109,44,19,24,50,65,58,132,81,67],
  [553,92,46,19,39,48,50,29,100,26,31,109,44,19,24,50,65,58,132,81,67],
  [560,92,46,19,39,48,50,30,100,26,31,109,44,19,24,50,65,58,132,81,67],
  [567,92,46,19,39,48,51,29,100,26,31,109,45,19,24,50,65,57,133,81,67],
  [574,92,46,19,39,48,50,29,100,26,31,108,44,19,25,50,65,57,132,81,67],
  [581,93,46,18,38,48,50,30,100,26,31,108,44,19,24,50,65,57,133,81,67],
  [588,92,46,18,39,48,51,30,100,26,31,108,44,19,24,50,65,58,133,81,67],
  [595,92,46,18,38,48,45,30,100,26,31,109,44,19,24,50,65,58,133,81,67],
  [602,92,46,18,39,49,46,29,100,26,31,108,45,19,24,50,65,57,133,81,67],
  [609,92,46,18,39,49,47,30,100,26,31,108,44,19,24,50,64,57,133,81,67],
  [616,92,46,18,38,49,48,30,100,26,31,108,44,19,24,50,64,57,133,81,67],
  [623,92,45,18,39,49,48,30,100,26,31,108,44,19,25,50,64,57,133,81,67],
  [630,92,46,18,39,49,48,30,100,26,31,108,44,19,24,50,64,57,134,81,67],
  [637,92,46,18,39,48,48,30,100,26,31,108,44,19,24,50,64,57,134,81,67],
  [644,92,46,18,39,48,49,30,100,26,31,108,44,19,24,49,64,57,134,81,67],
  [651,92,46,18,39,48,49,30,100,26,31,108,44,19,25,49,64,57,135,81,67],
  [658,92,46,18,38,48,48,30,100,26,31,108,44,19,25,49,64,57,134,81,67],
  [665,92,46,18,39,48,48,30,99,26,31,108,44,19,24,49,64,57,134,81,67],
  [672,92,46,18,39,48,48,30,99,26,31,108,44,19,24,49,64,57,134,81,67],
  [679,92,46,18,39,48,48,30,99,26,31,108,44,19,25,49,64,56,136,81,67],
  [686,92,46,18,39,48,48,30,99,26,31,107,39,20,24,49,64,56,136,81,67],
  [693,92,46,18,39,48,49,30,99,26,31,108,41,19,25,49,64,54,136,81,67],
  [700,92,46,18,39,48,45,30,99,26,31,108,41,20,24,49,64,53,137,81,67],
  [707,92,46,18,39,48,46,30,99,26,31,108,41,19,25,49,64,53,137,81,67],
  [714,91,46,18,39,48,46,30,99,26,31,108,39,20,24,49,64,54,138,81,67],
  [721,92,46,18,39,48,47,30,99,25,30,108,40,19,24,49,64,54,138,81,67],
  [728,91,46,18,39,48,47,30,99,26,31,108,40,20,24,49,64,54,139,81,67],
  [735,91,46,18,39,48,46,30,99,25,31,108,40,19,24,49,64,54,139,81,67],
  [742,91,45,18,39,48,43,30,99,25,31,108,39,19,24,49,64,53,140,81,67],
  [749,91,45,18,39,47,43,30,99,25,31,108,39,19,24,49,64,53,141,81,67],
  [756,91,45,18,39,47,40,30,99,25,30,108,39,19,24,49,63,53,142,81,67],
  [763,91,45,18,39,47,34,30,99,25,30,108,40,19,24,49,64,53,143,81,67],
  [770,91,45,18,39,47,34,30,99,26,31,109,40,19,24,49,63,53,145,81,67],
  [777,91,45,18,39,47,34,30,99,25,31,109,39,20,24,49,63,52,146,81,67],
  [784,91,45,18,39,47,34,30,99,25,30,109,39,19,24,49,63,52,147,81,67],
  [791,91,45,18,39,47,34,30,99,25,31,109,39,19,24,49,63,52,150,81,67],
  [798,91,45,18,39,47,34,30,99,25,31,109,39,19,24,49,63,52,152,81,67],
  [805,91,45,18,39,47,30,30,99,25,31,110,39,19,24,49,63,52,154,81,67],
  [812,91,45,18,39,48,29,30,99,25,31,110,39,19,24,49,63,52,155,81,67],
  [819,92,45,18,39,48,29,30,99,25,31,110,39,19,24,49,63,51,157,81,67],
  [826,91,45,18,39,48,29,30,99,25,31,111,40,19,24,49,63,52,159,81,67],
  [833,92,45,18,39,48,30,30,99,25,31,111,40,20,24,49,63,51,161,81,67],
  [840,91,45,18,39,48,29,30,99,25,31,111,39,19,24,49,63,51,163,81,67],
  [847,91,45,18,39,48,29,30,99,25,31,112,40,19,24,49,63,51,165,81,67],
  [854,91,45,18,39,49,29,30,99,25,31,112,40,19,24,49,63,51,166,81,67],
  [861,92,45,18,39,49,29,30,99,26,31,113,40,19,24,49,63,51,168,81,67],
  [868,91,45,18,39,49,28,30,98,25,31,114,40,19,24,49,63,50,169,81,67],
  [875,92,45,18,39,49,29,30,99,26,31,115,40,19,24,48,63,50,171,81,67],
  [882,91,45,18,39,49,27,30,99,25,31,115,40,19,24,48,63,50,173,81,67],
  [889,91,45,18,39,49,29,30,99,26,31,116,40,19,24,48,63,50,174,81,67],
  [896,91,45,18,39,49,28,30,99,26,31,118,40,19,24,48,63,50,175,81,67],
  [903,91,45,18,39,49,28,30,99,26,31,119,41,19,24,48,63,50,177,81,67],
  [910,91,45,18,39,49,28,30,99,26,31,120,41,19,24,48,63,50,178,81,67],
  [917,91,45,18,39,48,29,30,99,26,31,122,40,19,24,48,63,50,179,81,67],
  [924,91,45,18,39,48,28,30,98,26,31,123,40,19,24,48,63,50,181,81,67],
  [931,91,45,18,39,48,27,30,98,25,31,124,40,19,24,48,63,50,182,81,67],
  [938,91,45,18,39,48,28,30,98,26,31,126,40,19,24,48,63,50,183,81,67],
  [945,91,45,18,39,48,25,30,98,26,31,127,40,19,24,48,63,50,183,81,67],
  [952,91,45,18,39,48,26,30,98,26,31,129,41,19,24,48,63,50,184,81,67],
  [959,91,45,18,39,48,26,30,98,25,31,130,41,19,24,48,63,50,185,81,67],
  [966,91,45,18,39,48,26,30,98,26,31,132,41,19,24,48,63,50,186,81,67],
  [973,91,45,18,39,48,27,30,98,26,31,133,41,19,24,48,62,50,186,81,68],
  [980,91,45,18,39,48,26,30,98,26,31,135,39,19,24,48,62,50,187,81,67],
  [987,91,45,18,39,48,26,30,98,26,31,137,40,19,24,48,62,50,187,81,67],
  [994,91,45,18,39,48,25,30,98,26,31,138,40,19,24,48,62,50,188,81,67],
  [1001,91,45,18,39,47,25,30,98,26,31,140,40,19,24,48,62,50,188,81,67],
  [1008,91,45,18,39,47,25,30,98,26,31,141,40,19,24,48,62,50,189,81,67],
  [1015,91,45,18,39,47,24,30,98,26,31,143,39,19,24,48,62,51,189,81,67],
  [1022,91,45,18,39,47,24,30,98,26,31,144,39,19,24,48,62,51,190,81,67],
  [1029,91,45,18,39,47,24,30,98,26,31,146,39,19,24,48,62,50,190,81,67],
  [1036,91,45,18,39,47,24,30,98,26,31,147,39,19,24,48,62,50,190,81,67],
  [1043,91,45,18,39,47,24,30,98,26,31,149,39,19,24,48,62,51,191,81,67],
  [1050,91,45,18,38,47,25,30,98,26,31,150,39,19,24,48,62,51,191,81,67],
  [1057,91,45,18,38,47,24,30,98,26,31,152,39,19,24,48,62,50,191,81,67],
  [1064,91,45,18,39,47,24,30,98,26,31,152,39,19,24,48,62,50,191,81,67],
  [1071,91,45,18,38,47,24,30,98,26,31,153,39,19,24,48,62,51,191,81,67],
  [1078,91,45,18,38,47,24,30,98,26,31,154,39,19,24,48,62,51,192,81,67],
  [1085,91,45,18,38,47,24,30,97,26,31,155,39,19,24,47,62,51,192,81,67],
  [1092,91,45,18,38,47,23,30,97,26,31,156,39,20,24,47,62,51,192,81,67],
  [1099,91,45,18,38,47,24,30,98,26,31,157,39,19,24,48,62,51,192,81,68],
  [1106,91,45,18,38,47,23,30,98,26,31,158,39,19,24,48,62,51,192,81,67],
  [1113,91,45,18,38,47,23,30,98,26,31,159,39,19,24,47,62,51,192,81,67],
  [1120,91,45,18,38,47,23,30,98,26,31,160,39,19,24,48,62,50,192,81,67],
  [1127,91,45,18,38,47,23,30,98,26,31,160,39,19,24,47,62,51,192,81,67],
  [1134,91,45,18,38,47,23,30,98,26,31,161,39,19,24,47,62,51,192,81,67],
  [1141,90,45,18,38,47,23,30,98,26,31,161,39,19,24,47,62,50,192,81,67],
  [1148,90,45,18,38,47,23,30,98,26,30,162,39,19,24,47,62,51,192,81,67],
  [1155,90,44,18,38,47,23,30,98,26,30,162,39,19,24,47,62,50,192,81,67],
  [1162,91,45,18,38,47,23,30,98,26,30,162,39,19,24,47,62,51,192,81,67],
  [1169,90,45,18,38,47,23,30,98,26,30,163,39,19,24,47,62,51,192,81,67],
  [1176,90,45,18,38,47,22,30,98,26,30,163,39,19,24,47,62,51,192,81,67],
  [1183,90,44,18,38,47,22,30,97,26,30,163,38,19,24,47,62,50,192,81,67],
  [1190,90,44,18,38,46,22,30,97,26,30,164,38,19,24,47,62,51,192,81,67],
  [1197,90,44,18,38,46,22,29,97,26,30,164,39,19,24,47,62,50,192,81,67],
  [1204,90,44,18,38,46,22,29,97,26,30,164,39,19,24,48,62,50,191,81,67],
  [1211,90,45,18,38,46,22,30,97,26,30,164,39,19,24,47,62,51,192,81,67],
  [1218,90,45,18,38,47,22,29,97,26,30,164,38,19,24,48,62,51,192,81,68],
  [1225,91,45,18,39,47,22,29,97,26,30,164,39,19,24,48,63,51,192,82,68],
  [1232,91,45,18,39,49,22,30,97,26,31,163,39,20,24,49,64,51,192,82,68],
  [1239,91,45,18,39,50,22,29,97,26,31,162,39,20,24,49,64,52,192,82,68],
  [1246,91,46,18,39,50,22,30,97,26,31,162,39,20,24,50,64,52,192,82,68],
  [1253,91,46,18,39,50,22,29,97,26,31,162,39,20,24,50,65,52,192,82,68],
  [1260,91,46,18,39,51,23,29,97,26,31,161,39,20,24,50,65,53,192,82,69],
  [1267,91,46,18,39,51,23,29,97,26,31,160,39,21,24,51,66,53,192,82,69],
  [1274,91,46,18,39,51,23,30,96,26,31,160,37,22,24,51,66,53,192,82,69],
  [1281,91,46,18,39,51,23,29,96,26,31,160,37,23,25,51,66,53,192,82,69],
  [1288,91,46,18,39,51,23,29,96,26,31,160,38,24,25,51,66,53,192,82,69],
  [1295,92,46,18,39,51,23,29,96,26,31,160,38,25,24,51,66,53,193,82,69],
  [1302,91,46,18,39,51,23,29,96,26,31,160,38,27,24,51,66,53,193,82,69],
  [1309,91,46,18,39,51,23,29,96,26,31,160,38,28,24,51,66,53,192,82,69],
  [1316,91,46,18,38,51,23,29,96,26,31,161,38,29,24,51,66,53,192,82,69],
  [1323,91,46,18,38,51,23,29,97,26,31,160,38,30,24,51,65,53,193,82,69],
  [1330,91,46,18,39,50,23,29,97,26,31,160,38,31,24,51,65,53,192,82,69],
  [1337,91,46,18,39,50,23,29,97,26,31,161,38,31,24,50,65,53,192,82,69],
  [1344,91,46,18,39,50,23,29,97,26,31,160,37,31,24,51,65,53,192,82,69],
  [1351,91,46,18,39,51,24,29,97,26,31,160,38,32,24,51,65,53,192,82,69],
  [1358,91,46,18,39,51,23,29,97,26,31,160,38,32,24,51,65,53,192,82,69],
  [1365,91,46,18,39,51,23,29,97,26,31,160,38,32,24,51,65,53,192,82,69],
  [1372,91,46,18,39,50,23,29,97,26,31,160,37,32,24,51,65,53,192,82,69],
  [1379,91,46,18,39,50,23,29,97,26,31,160,37,32,24,50,65,53,192,82,69],
  [1386,91,46,18,39,50,23,29,97,26,31,160,37,32,24,51,65,53,192,82,69],
  [1393,91,46,18,39,50,23,30,97,26,31,160,38,32,24,51,65,53,191,82,69],
  [1400,91,46,18,39,50,23,29,97,26,31,160,37,32,24,51,65,53,191,82,69],
  [1407,91,46,18,39,50,23,29,97,26,31,159,37,30,24,51,65,53,191,82,69],
  [1414,91,46,18,39,50,23,29,97,26,31,159,37,30,24,51,65,53,191,82,69],
  [1421,91,46,18,39,50,23,29,97,26,31,159,37,31,24,51,65,53,192,82,69],
  [1428,91,46,18,39,51,23,29,97,26,31,159,37,31,24,51,65,53,192,82,69],
  [1435,91,46,18,39,51,23,29,98,26,31,159,37,31,24,51,65,53,191,82,69],
  [1442,91,46,18,39,51,23,29,98,26,31,159,37,30,24,51,65,53,190,82,69],
  [1449,91,46,18,38,51,23,29,98,26,31,159,37,29,24,51,65,53,190,82,69],
  [1456,92,46,18,39,51,23,29,98,26,31,159,37,29,24,51,65,53,190,82,69],
  [1463,92,46,18,39,51,23,30,98,26,31,158,37,28,24,51,65,53,191,82,69],
  [1470,92,46,18,39,51,22,29,98,26,31,158,37,29,25,51,65,53,191,82,69],
  [1477,92,46,18,39,51,23,29,98,26,31,158,37,28,24,51,65,53,189,82,69],
  [1484,92,46,18,39,51,23,30,98,26,31,158,37,29,24,51,65,53,189,82,69],
  [1491,92,46,18,39,51,22,29,98,26,31,159,37,29,24,51,65,53,190,82,69],
  [1498,92,46,18,39,51,22,29,98,26,31,159,37,29,24,51,65,53,190,82,69],
  [1505,92,46,18,39,51,22,29,98,26,31,159,37,30,24,50,65,53,190,82,69],
  [1512,92,46,18,39,50,22,29,99,26,31,159,37,29,24,50,65,53,188,82,69],
  [1519,92,46,18,39,51,22,29,99,26,31,159,37,29,24,50,65,53,189,82,69],
  [1526,92,46,18,39,51,22,29,99,26,31,158,37,29,24,50,65,52,189,82,69],
  [1533,92,46,18,39,51,22,29,99,26,31,159,37,29,24,50,65,53,189,82,69],
  [1540,92,46,18,39,51,22,29,99,26,30,159,37,28,24,50,65,53,189,82,69],
  [1547,92,46,18,39,51,22,29,99,26,31,158,37,29,24,50,65,53,188,82,69],
  [1554,92,46,18,39,51,22,30,99,26,31,158,37,27,24,51,65,53,188,82,69],
  [1561,92,46,18,39,51,22,29,99,26,31,157,37,29,24,51,65,53,188,82,69],
  [1568,92,46,18,39,51,22,29,99,26,31,157,37,30,24,51,65,53,188,82,69],
  [1575,92,46,18,39,51,22,29,99,26,30,157,37,30,24,51,65,53,188,82,69],
  [1582,92,46,18,39,51,22,29,99,26,31,157,37,31,25,51,65,53,188,82,69],
  [1589,93,46,18,39,51,22,29,100,26,31,157,37,31,25,51,65,53,188,82,69],
  [1596,92,46,18,39,51,22,29,100,26,31,157,37,30,24,51,65,53,188,82,69],
  [1603,92,46,18,39,50,22,29,100,26,31,157,37,30,24,51,65,53,188,82,69],
  [1610,92,46,18,39,50,22,29,100,26,31,156,37,30,24,51,65,53,187,82,70],
  [1617,93,46,18,39,50,22,29,100,26,31,156,37,30,24,51,65,53,187,82,70],
  [1624,92,46,18,39,50,22,29,101,26,31,156,37,30,25,51,65,53,187,82,70],
  [1631,93,46,18,39,50,21,29,101,26,31,156,37,30,25,51,65,53,187,82,70],
  [1638,93,46,18,39,50,22,29,101,26,31,156,37,28,25,51,65,53,187,82,70],
  [1645,93,46,18,39,50,22,29,101,26,31,155,38,29,24,51,65,53,187,82,70],
  [1652,93,46,18,39,50,22,29,101,26,31,155,37,29,24,51,65,53,187,82,70],
  [1659,93,46,18,39,50,22,29,102,26,31,155,37,29,25,51,65,53,187,82,70],
  [1666,93,46,18,39,50,22,29,102,26,31,155,37,28,25,51,65,53,188,82,70],
  [1673,93,46,18,39,50,22,29,102,26,31,155,37,28,25,51,65,53,188,82,70],
  [1680,93,46,18,39,50,21,29,102,26,30,154,37,28,25,51,65,53,187,82,70],
  [1687,93,46,18,39,50,22,29,102,26,30,154,37,28,24,51,65,53,187,82,70],
  [1694,93,46,18,39,50,21,29,103,26,31,154,37,28,25,51,65,53,187,82,70],
  [1701,93,46,18,39,50,21,29,104,26,31,154,37,28,25,51,65,53,187,82,70],
  [1708,93,46,18,39,50,21,29,104,26,31,153,37,28,25,50,65,53,187,82,70],
  [1715,94,46,18,39,50,21,29,104,26,31,153,36,27,24,50,65,52,187,82,70],
  [1722,94,46,18,39,50,21,29,105,26,30,153,36,27,25,50,65,52,186,82,70],
  [1729,94,46,18,39,50,21,29,105,26,31,153,37,27,25,51,65,52,186,82,70],
  [1736,94,46,18,39,50,21,29,105,26,30,153,37,27,25,51,65,52,186,82,70],
  [1743,94,46,18,39,50,21,29,105,26,30,152,37,27,25,50,65,52,186,82,70],
  [1750,94,46,18,39,50,21,29,106,26,31,152,37,27,25,50,65,52,186,82,70],
  [1757,94,46,18,39,50,21,29,106,26,30,152,36,27,25,50,65,52,186,82,70],
  [1764,94,46,18,39,50,21,29,107,26,31,152,37,27,25,50,65,52,185,82,70],
  [1771,95,46,18,39,50,21,29,107,26,30,152,37,27,25,50,65,52,185,82,70],
  [1778,95,46,18,39,50,21,29,108,26,30,152,36,27,25,50,65,52,185,82,70],
  [1785,95,46,18,39,50,21,29,109,26,31,152,37,28,25,51,65,52,185,82,70],
  [1792,95,46,18,39,50,21,29,109,26,30,152,37,27,25,50,65,52,185,82,70],
  [1799,95,46,18,39,50,22,29,109,26,31,152,37,27,25,51,65,52,185,82,70]
];

// Convert the new data to chart format with headers
const newGraphHeaders = ["Time","Ba1","Ba2","Ba3","Yp1","Yp2","Yp3","Yp4","Ft","CbA","CbB","Bru","Ric","Pox","Bt","Sa","Ba","Yp","CbA","IPC","NTC"];

const lineChartData = newGraphData.map(row => {
  const obj: Record<string, number> = {};
  newGraphHeaders.forEach((header, i) => {
    obj[header] = row[i];
  });
  return obj;
});

export default function Dashboard() {
  const [search, setSearch] = useState("");
  const [date, setDate] = useState<Date | undefined>();
  const [location, setLocation] = useState<string>("");

  // Get unique locations for the filter dropdown
  const uniqueLocations = [...new Set(mockTableRows.map(row => row.Location))];

  // Updated filter logic to include location
  const filteredRows = mockTableRows.filter((row) =>
    (!search ||
      row.Location.toLowerCase().includes(search.toLowerCase()) ||
      row["Sample ID"].toLowerCase().includes(search.toLowerCase()) ||
      row["Collected by"].toLowerCase().includes(search.toLowerCase()) ||
      row.ReportedBy.toLowerCase().includes(search.toLowerCase())) &&
    (!date || row.SampleDate === format(date, "yyyy-MM-dd")) &&
    (!location || row.Location === location)
  );

  return (
    <div className="max-w-7xl mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold mb-6 flex items-center gap-2">
        <User className="inline w-6 h-6" /> Test Results Dashboard
      </h1>

      {/* --- Timeseries Chart --- */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Time Series Sample Values</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="w-full h-96">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={lineChartData}
                margin={{ top: 16, right: 32, left: 16, bottom: 20 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="Time" label={{ value: "Time", position: "insideBottomRight", offset: -8 }} />
                <YAxis 
                  label={{ value: "Value", angle: -90, position: "insideLeft", offset: 10 }}
                  tickCount={5}
                  interval="preserveStartEnd"
                />
                <Tooltip />
                <Legend verticalAlign="top" height={36} />
                <Line type="monotone" dataKey="Ba1" stroke="#e11d48" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Ba2" stroke="#7c3aed" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Ba3" stroke="#059669" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Yp1" stroke="#dc2626" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Yp2" stroke="#2563eb" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Yp3" stroke="#ea580c" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Yp4" stroke="#0891b2" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Ft" stroke="#ca8a04" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="CbA" stroke="#16a34a" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="CbB" stroke="#c2410c" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Bru" stroke="#9333ea" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Ric" stroke="#0d9488" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Pox" stroke="#dc2626" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Bt" stroke="#7c2d12" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Sa" stroke="#065f46" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Ba" stroke="#991b1b" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="Yp" stroke="#1e40af" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="IPC" stroke="#be185d" strokeWidth={2} dot={false} />
                <Line type="monotone" dataKey="NTC" stroke="#374151" strokeWidth={2} dot={false} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      {/* --- Filters and Table --- */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4 flex-wrap">
            <div className="flex items-center gap-2">
              <Input
                placeholder="Search by location, ID, or user"
                value={search}
                onChange={e => setSearch(e.target.value)}
                className="max-w-xs"
              />
              <Search className="w-4 h-4 text-muted-foreground" />
            </div>
            <Select value={location} onValueChange={setLocation}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by location" />
              </SelectTrigger>
              <SelectContent>
                {uniqueLocations.map((loc) => (
                  <SelectItem key={loc} value={loc}>
                    Location {loc}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={"outline"}
                  className="flex items-center gap-2"
                >
                  <CalendarIcon className="w-4 h-4" />
                  {date ? format(date, "PPP") : "Pick date"}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={setDate}
                  initialFocus
                  className="p-3 pointer-events-auto"
                />
              </PopoverContent>
            </Popover>
            <Button
              variant="ghost"
              onClick={() => {
                setDate(undefined);
                setSearch("");
                setLocation("");
              }}
            >
              Clear Filters
            </Button>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Test Result Records</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  {tableColumns.map((col) => (
                    <TableHead key={col}>{col}</TableHead>
                  ))}
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredRows.length > 0 ? (
                  filteredRows.map((row, idx) => (
                    <TableRow key={idx}>
                      {tableColumns.map((col) => (
                        <TableCell key={col}>{row[col] || ""}</TableCell>
                      ))}
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={tableColumns.length} className="text-center text-sm text-muted-foreground">
                      No results found for the selected filter.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

